package uk.ac.ed.inf.aqmaps;

import com.mapbox.geojson.Feature;

import java.awt.geom.Point2D;

import static uk.ac.ed.inf.aqmaps.Utils.point2dToPoint;

/**
 * This class represents a Sensor.
 * It includes methods to visit it, as well as to generate a GeoJson representation of it.
 * This uses the {@link DataPoint} class to generate an appropriate marker.
 */
public class Sensor {
    /** Instance attributes for the sensor */
    private Point2D coordinates;
    private final String location;
    private final double battery;
    private final String reading;
    private boolean visited;

    /**
     * Class constructor
     *
     * @param coordinates The coordinates of the sensor
     * @param location The What3Words location of the sensor
     * @param battery The battery reading of the sensor
     * @param reading The value reading of the sensor
     * @param visited Whether the sensor was visited
     */
    public Sensor(Point2D coordinates, String location, double battery, String reading, boolean visited) {
        // This constructor is never called, as sensors are generated by Gson
        this.coordinates = coordinates;
        this.location = location;
        this.battery = battery;
        this.reading = reading;
        this.visited = visited;
    }

    /**
     * Method to visit this sensor.
     */
    public void visit() {
        this.visited = true;
    }


    /**
     * Method to generate a GeoJson feature representing the sensor.
     * The attributes for the marker are generated from {@link DataPoint}
     *
     * @return Feature The sensor feature.
     */
    public Feature toGeoJsonFeature() {
        // Instanciate a new appropriate DataPoint
        var data = new DataPoint(reading.equals("null") ? 0 : Double.parseDouble(reading), battery <= 10, visited);

        // Generate a feature and add necessary properties
        var feature = Feature.fromGeometry(point2dToPoint(coordinates));
        feature.addStringProperty("location", location);
        feature.addStringProperty("marker-symbol", data.getMarkerSymbol());
        feature.addStringProperty("marker-color", data.getRgbString());
        feature.addStringProperty("rgb-string", data.getRgbString());
        return feature;
    }


    /**
     * Method to set the coordinates of the sensor
     *
     * @param coordinates The coordinates of the sensor
     */
    public void setCoordinates(Point2D coordinates) {
        this.coordinates = coordinates;
    }


    /**
     * Method to get the coordinates of the sensor
     *
     * @return Point2D The coordinates of the sensor
     */
    public Point2D getCoordinates() {
        return coordinates;
    }


    /**
     * Method to get the What3Words location of the sensor
     *
     * @return String The What3Words location of the sensor
     */
    public String getLocation() {
        return location;
    }
}
